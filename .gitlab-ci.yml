stages:
  - build
  - deploy

cache: &global_cache
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .pnpm-store
    - node_modules/
  policy: pull-push

build-asset:
  stage: build
  image: node:18-alpine
  cache:
    <<: *global_cache

  tags:
    - fokus-runner   # use fokus-runner
  before_script:
    - npm i -g pnpm
    - pnpm config set store-dir .pnpm-store
  script:
    - pnpm install
    - cp .env.template .env.local
    - pnpm run build-only
  artifacts:
    paths:
      - dist

build-and-push:
  stage: build
  image: docker:stable
  services:
    - docker:dind
  variables:
    IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - docker build -t $IMAGE_NAME .
    - docker push $IMAGE_NAME
  dependencies:
    - build-asset
  tags:
    - fokus-runner  #use fokus-runner
  only:
    - master
    - test-ci

deploy-to-openshift:
  stage: deploy
  image:
    name: quay.io/openshift/origin-cli:latest
    entrypoint: [""]
  variables:
    IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    DEPLOYMENT_NAME: piveau-vanilla-ui
    NAMESPACE: piveau
  before_script:
    - echo "Server URL:" $OPENSHIFT_SERVER
    - echo "Token set:" $(test -n "$OPENSHIFT_TOKEN" && echo "yes" || echo "no")
    # Login to OpenShift cluster
    - oc login $OPENSHIFT_SERVER --token=$OPENSHIFT_TOKEN --insecure-skip-tls-verify=true
    - oc project $NAMESPACE
  script:
    # Update the deployment with new image
    - oc set image deployment/$DEPLOYMENT_NAME $DEPLOYMENT_NAME=$IMAGE_NAME -n $NAMESPACE
    # Wait for rollout to complete
    - oc rollout status deployment/$DEPLOYMENT_NAME -n $NAMESPACE --timeout=300s
    # Verify deployment
    - oc get pods -l app.kubernetes.io/name=piveau-hub-ui -n $NAMESPACE
  tags:
    - fokus-runner
  only:
    - master
    - test-ci
  dependencies:
    - build-and-push
  when: manual  # Remove this line if you want automatic deployment
